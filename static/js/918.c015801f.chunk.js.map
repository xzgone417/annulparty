{"version":3,"file":"static/js/918.c015801f.chunk.js","mappings":"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","sources":["utils/fetchRequest.ts","components/MyDialog.tsx","components/HorizontalProgressBar.tsx","views/Question.tsx"],"sourcesContent":["enum requestMethodEnum {\r\n    post = \"POST\",\r\n    get = \"GET \",\r\n    put = \"PUT\",\r\n    delete = \"DELETE \",\r\n}\r\n\r\nexport interface RequestConfigType {\r\n    method?: requestMethodEnum\r\n    domain: string;\r\n    url: string;\r\n    lng?: string;\r\n    headers: Record<string, string>;\r\n    signal?: AbortSignal | null | undefined\r\n}\r\n\r\nexport type ResponseHandlerType = {\r\n    onError?: (data?: any) => any;\r\n    onFinally?: (data?: any) => any;\r\n    messageApi?: any;\r\n    content?: string;\r\n};\r\n\r\nexport const paramsSting = (params: any) => {\r\n    const sortedParams = Object.keys(params)\r\n        .sort()\r\n        .reduce((result: any, key) => {\r\n            result[key] = params[key];\r\n            return result;\r\n        }, {});\r\n\r\n    const paramString = Object.keys(sortedParams)\r\n        .map((key) => `${key}=${sortedParams[key]}`)\r\n        .join(\"&\");\r\n    return paramString;\r\n};\r\n\r\n\r\n\r\nexport function getTimestampManager() {\r\n    let firstTimestamp: number | null = null;\r\n\r\n    function getFirstTimestamp() {\r\n        if (firstTimestamp === null) {\r\n            firstTimestamp = Date.now();\r\n        }\r\n        return firstTimestamp;\r\n    }\r\n\r\n    function getNewTimestamp() {\r\n        return Date.now();\r\n    }\r\n\r\n    return {\r\n        getFirstTimestamp,\r\n        getNewTimestamp,\r\n    };\r\n}\r\n\r\nexport const confDomain = \"\"\r\n// export const confDomain = \"https://timish.woa.com\"\r\n// domain: \"http://annualparty-server.annualpart-server.odprrp.woa.com\",\r\n// \"proxy\": \"http://localhost:8081\",\r\nexport const jsonFetch = async (\r\n    _config: Partial<RequestConfigType>,\r\n    query: any,\r\n    resHandler?: ResponseHandlerType\r\n) => {\r\n    const config = {\r\n        domain: confDomain,\r\n        url: \"\",\r\n        ..._config,\r\n    };\r\n    let endHeaders = {\r\n        \"Content-Type\": \"application/json\",\r\n        ..._config.headers,\r\n    };\r\n    try {\r\n        const response = await fetch(config.domain + config.url, {\r\n            method: \"POST\",\r\n            headers: endHeaders,\r\n            cache: \"no-store\",\r\n            signal: config.signal,\r\n            body: JSON.stringify(query),\r\n        });\r\n        if (!response.ok) {\r\n            throw new Error(\"Network response was not ok\");\r\n        }\r\n        const text = await response.text();\r\n\r\n        try {\r\n            const result = JSON.parse(text); // 使用JSON.parse来尝试解析文本\r\n            return result;\r\n        } catch (jsonError) {\r\n            // 如果解析失败，返回原始文本\r\n            return text;\r\n        }\r\n    } catch (error: any) {\r\n        // throw error;\r\n\r\n    } finally {\r\n        if (resHandler?.onFinally) resHandler.onFinally();\r\n    }\r\n};\r\n\r\nexport const getFetch = async (\r\n    _config: Partial<RequestConfigType>,\r\n    query: any,\r\n    resHandler?: ResponseHandlerType\r\n) => {\r\n    const config = {\r\n\r\n        domain: confDomain,\r\n        url: \"\",\r\n        ..._config,\r\n    };\r\n    let endHeaders = {\r\n        ..._config.headers,\r\n    };\r\n    try {\r\n        const response = await fetch(config.domain + config.url + \"?\" + paramsSting(query), {\r\n            method: \"GET\",\r\n            headers: endHeaders,\r\n            cache: \"no-store\",\r\n            signal: config.signal,\r\n        });\r\n\r\n        if (!response.ok) {\r\n            throw new Error(\"Network response was not ok\");\r\n        }\r\n        const text = await response.text();\r\n\r\n        try {\r\n            const result = JSON.parse(text); // 使用JSON.parse来尝试解析文本\r\n            return result;\r\n        } catch (jsonError) {\r\n            return text;\r\n        }\r\n    } catch (error: any) {\r\n        if (resHandler?.onError) resHandler.onError();\r\n        // throw error;\r\n    } finally {\r\n        if (resHandler?.onFinally) resHandler.onFinally();\r\n    }\r\n};\r\n","import React, { useEffect } from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"../styles/components/dialog.scss\";\r\nconst MyDialog = ({ isOpen, onClose, message }: any) => {\r\n  useEffect(() => {\r\n    // 当对话框打开时，禁用页面滚动\r\n    if (isOpen) {\r\n      document.body.style.overflow = \"hidden\";\r\n    } else {\r\n      document.body.style.overflow = \"auto\";\r\n    }\r\n  }, [isOpen]);\r\n\r\n  if (!isOpen) {\r\n    return null;\r\n  }\r\n\r\n  // 点击背景或确认按钮时关闭对话框\r\n  const handleBackdropClick = () => {\r\n    onClose();\r\n  };\r\n\r\n  return ReactDOM.createPortal(\r\n    <div className=\"modal-backdrop\" onClick={handleBackdropClick}>\r\n      <div className=\"modal\" onClick={(e) => e.stopPropagation()}>\r\n        <div className=\"modal-content\">\r\n          <p>{message}</p>\r\n          <button onClick={onClose}>确认</button>\r\n        </div>\r\n      </div>\r\n    </div>,\r\n    document.body\r\n  );\r\n};\r\n\r\nexport default MyDialog;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport \"../styles/components/progress.scss\"; // 假设样式文件已更改\r\n\r\ninterface HorizontalProgressBarProps {\r\n  totalDuration: number; // 总时长，单位：秒\r\n}\r\n\r\nconst HorizontalProgressBar: React.FC<HorizontalProgressBarProps> = ({\r\n  totalDuration,\r\n}) => {\r\n  const [progress, setProgress] = useState(0);\r\n  const intervalDuration = 100; // 每0.1秒更新一次\r\n\r\n  useEffect(() => {\r\n    const intervalId = setInterval(() => {\r\n      setProgress((prevProgress) => {\r\n        const newProgress = prevProgress + intervalDuration / 1000;\r\n        if (newProgress >= totalDuration) {\r\n          clearInterval(intervalId);\r\n        }\r\n        return newProgress;\r\n      });\r\n    }, intervalDuration);\r\n\r\n    return () => clearInterval(intervalId);\r\n  }, [totalDuration]);\r\n\r\n  // 计算当前进度百分比\r\n  const percentage = (progress / totalDuration) * 100;\r\n\r\n  // 底层进度条样式\r\n  const progressFillStyle = {\r\n    width: \"100%\",\r\n    height: \"100%\",\r\n    backgroundColor: \"#2bf794\", // 始终保持黄色\r\n    position: \"relative\" as \"relative\", // 确保子元素绝对定位相对于此元素\r\n  };\r\n\r\n  // 白色覆盖层的样式，初始时覆盖整个进度条，随着进度减少覆盖区域\r\n  const whiteOverlayStyle = {\r\n    width: `${percentage}%`, // 根据进度百分比设置覆盖层宽度\r\n    height: \"100%\",\r\n    backgroundColor: \"#868686\",\r\n    position: \"absolute\" as \"absolute\",\r\n    top: 0,\r\n    right: 0, // 从右向左减少\r\n  };\r\n  // 进度条的颜色变化逻辑\r\n  const progressColor = percentage >= 90 ? \"#fb4a3e\" : \"#2bf794\"; // 90% 之后变为红色\r\n\r\n  return (\r\n    <div className=\"horizontal-progress-container\">\r\n      <div\r\n        className=\"progress-fill\"\r\n        style={{ ...progressFillStyle, backgroundColor: progressColor }}\r\n      >\r\n        <div className=\"white-overlay\" style={whiteOverlayStyle} />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default HorizontalProgressBar;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport \"../styles/question.scss\";\r\nimport questionJsonFile from \"../json/question.json\";\r\nimport { useParams, useNavigate } from \"react-router-dom\";\r\nimport { getFetch, jsonFetch } from \"../utils/fetchRequest\";\r\nimport { motion } from \"framer-motion\";\r\nimport MyDialog from \"../components/MyDialog\";\r\nimport HorizontalProgressBar from \"../components/HorizontalProgressBar\";\r\nimport Loader from \"../components/Loader\";\r\ntype Props = {};\r\nconst questionJson = questionJsonFile as any;\r\nconst optionImages = [\r\n  {\r\n    selected: \"../../public/assets/select-A.png\",\r\n    default: \"../../public/assets/btn-A.png\",\r\n  },\r\n  {\r\n    selected: \"../../public/assets/select-B.png\",\r\n    default: \"../../public/assets/btn-B.png\",\r\n  },\r\n  {\r\n    selected: \"../../public/assets/select-C.png\",\r\n    default: \"../../public/assets/btn-C.png\",\r\n  },\r\n];\r\nconst Question = (props: Props) => {\r\n  const { questionId } = useParams();\r\n  const navigate = useNavigate();\r\n  // const location = useLocation();\r\n  const [optionList, setOptionList] = useState([] as any[]);\r\n  const [questionTitle, setQuestionTitle] = useState(\"\");\r\n  const [questionTag, setQuestionTag] = useState(0);\r\n  const [initDuration, setInitDuration] = useState(0); // 初始化状态\r\n  const [duration, setDuration] = useState(0); // 初始化状态\r\n  const [selectedOption, setSelectedOption] = useState(0); // 初始化状态\r\n  const [isModalOpen, setModalOpen] = useState(false);\r\n  const [isLoading, setIsLoading] = useState(true);\r\n  const [imageLoaded, setImageLoaded] = useState(false);\r\n\r\n  const toBegin = async (params: any) => {\r\n    await jsonFetch(\r\n      {\r\n        headers: {},\r\n        url: \"/annual/begin\",\r\n        signal: params.signal,\r\n      },\r\n      questionTag,\r\n      {\r\n        onError: () => {\r\n          console.log(\"begin-error\");\r\n        },\r\n      }\r\n    );\r\n  };\r\n  const postOption = async (params: any) => {\r\n    setIsLoading(true);\r\n    if (!selectedOption || selectedOption <= 0) {\r\n      setModalOpen(true);\r\n      return;\r\n    }\r\n    await jsonFetch(\r\n      {\r\n        headers: {},\r\n        url: `/annual/choose`,\r\n        signal: params.signal,\r\n      },\r\n      { questionID: questionTag, option: selectedOption },\r\n      {\r\n        onError: () => {},\r\n      }\r\n    );\r\n    setIsLoading(false);\r\n    navigate(\"/result\", { state: { resultParam: 1 } });\r\n  };\r\n  const toSelectOption = async (params: any) => {\r\n    setSelectedOption(params);\r\n  };\r\n\r\n  const optionBtnStyle = (index: number) => {\r\n    const idx = index - 1;\r\n    return {\r\n      backgroundImage: `url(${\r\n        selectedOption === index\r\n          ? optionImages[idx].selected\r\n          : optionImages[idx].default\r\n      })`,\r\n      transition: \"background-image 0.3s ease-in-out\", // 添加过渡效果\r\n      opacity: imageLoaded ? 1 : 0, // 根据图片加载状态设置透明度\r\n    };\r\n  };\r\n  // 预加载所有图片\r\n  useEffect(() => {\r\n    optionImages.forEach((image) => {\r\n      const img1 = new Image();\r\n      img1.src = image.selected;\r\n      const img2 = new Image();\r\n      img2.src = image.default;\r\n    });\r\n    setImageLoaded(true); // 所有图片加载完成\r\n  }, []);\r\n  useEffect(() => {\r\n    for (const keying in questionJson) {\r\n      if (Object.prototype.hasOwnProperty.call(questionJson, keying)) {\r\n        const element = questionJson[keying] as any;\r\n        if (questionId && Number(questionId) === Number(element.id)) {\r\n          setOptionList(element.options);\r\n          setQuestionTitle(element.title);\r\n          setQuestionTag(element.id);\r\n        }\r\n      }\r\n    }\r\n  }, [questionId]);\r\n\r\n  useEffect(() => {\r\n    const controller = new AbortController();\r\n    const { signal } = controller;\r\n    let timerId: any = null;\r\n    const getTime = async () => {\r\n      let res = await getFetch(\r\n        {\r\n          headers: {},\r\n          url: \"/annual/get/time\",\r\n          signal: signal,\r\n        },\r\n        { questionID: questionTag },\r\n        {\r\n          onError: () => {},\r\n        }\r\n      );\r\n\r\n      if (res > 0) {\r\n        setDuration(res);\r\n        setInitDuration(res);\r\n        clearInterval(timerId);\r\n        timerId = null;\r\n        await getOption();\r\n      } else {\r\n        setIsLoading(false);\r\n      }\r\n    };\r\n    const getOption = async () => {\r\n      const res = await getFetch(\r\n        {\r\n          headers: {},\r\n          url: \"/annual/get/option\",\r\n          signal: signal,\r\n        },\r\n        { questionID: questionTag },\r\n        {\r\n          onError: () => {},\r\n        }\r\n      );\r\n      if (res > 0) {\r\n        navigate(\"/result\", { state: { resultParam: 1 } });\r\n      }\r\n      setIsLoading(false);\r\n    };\r\n    if (questionTag > 0) {\r\n      timerId = setInterval(() => {\r\n        getTime();\r\n      }, 1000);\r\n    }\r\n\r\n    return () => {\r\n      controller.abort();\r\n      if (timerId) {\r\n        clearInterval(timerId);\r\n      }\r\n    };\r\n  }, [navigate, questionTag]);\r\n\r\n  useEffect(() => {\r\n    if (initDuration > 0) {\r\n      // 使用AbortController来提供一个取消定时器的机制\r\n      const controller = new AbortController();\r\n\r\n      const timerId = setTimeout(() => {\r\n        clearInterval(intervalId);\r\n        navigate(\"/result\", { state: { resultParam: 0 } });\r\n      }, initDuration * 1000);\r\n\r\n      // 设置一个每秒执行的interval，减少duration\r\n      const intervalId = setInterval(() => {\r\n        setDuration((prevDuration) => {\r\n          if (prevDuration <= 0) {\r\n            // 如果duration已经为0或负数，清除interval并返回0\r\n            clearInterval(intervalId);\r\n            return 0;\r\n          }\r\n          return prevDuration - 1; // 否则，每秒减少1000毫秒\r\n        });\r\n      }, 1000);\r\n\r\n      // 组件卸载或duration改变时的清理函数\r\n      return () => {\r\n        clearTimeout(timerId);\r\n        clearInterval(intervalId);\r\n        controller.abort(); // 取消任何正在进行的操作\r\n      };\r\n    }\r\n  }, [navigate, initDuration]);\r\n\r\n  return (\r\n    <main className=\"party-main\">\r\n      {initDuration > 0 && (\r\n        <motion.div\r\n          initial={{ opacity: 0 }}\r\n          animate={{ opacity: 1 }}\r\n          exit={{ opacity: 0 }}\r\n          transition={{ duration: 0.4 }}\r\n          className=\"party-bg\"\r\n        >\r\n          <div className=\"countdown-container\">\r\n            <HorizontalProgressBar\r\n              totalDuration={initDuration}\r\n            ></HorizontalProgressBar>\r\n          </div>\r\n          <div className=\"question-body\">\r\n            <section className=\"question-section\">\r\n              <div className=\"question-tag\">问题{questionTag}</div>\r\n              <div className=\"question-title\">{questionTitle}</div>\r\n            </section>\r\n            <section className=\"option-section\">\r\n              {optionList.map((item, index) => (\r\n                <div\r\n                  className=\"option-button\"\r\n                  style={optionBtnStyle(index + 1)}\r\n                  key={JSON.stringify(item)}\r\n                  onClick={() => {\r\n                    toSelectOption(index + 1);\r\n                  }}\r\n                >\r\n                  <span className=\"option-name\">{item?.name}</span>\r\n                </div>\r\n              ))}\r\n            </section>\r\n          </div>\r\n          <div className=\"submit-button-container\">\r\n            <button\r\n              className={\r\n                selectedOption > 0 ? \"submit-button selected\" : \"submit-button\"\r\n              }\r\n              onClick={postOption}\r\n            ></button>\r\n          </div>\r\n        </motion.div>\r\n      )}\r\n      {initDuration <= 0 && (\r\n        <div className=\"wait-bg\" onClick={toBegin}>\r\n          {/* <div className=\"party-center\" >\r\n            <div >等待作答</div>\r\n          </div>\r\n          <p className=\"wait-text\">请等待扫描下一题</p> */}\r\n        </div>\r\n      )}\r\n\r\n      {isModalOpen && (\r\n        <MyDialog\r\n          isOpen={isModalOpen}\r\n          onClose={() => {\r\n            setModalOpen(false);\r\n          }}\r\n          message=\"请先选择一个选项！\"\r\n        />\r\n      )}\r\n      {isLoading && <Loader></Loader>}\r\n    </main>\r\n  );\r\n};\r\n\r\nexport default Question;\r\n"],"names":["jsonFetch","async","_config","query","resHandler","config","domain","url","endHeaders","headers","response","fetch","method","cache","signal","body","JSON","stringify","ok","Error","text","parse","jsonError","error","onFinally","getFetch","params","sortedParams","Object","keys","sort","reduce","result","key","map","join","paramsSting","onError","_ref","isOpen","onClose","message","useEffect","document","style","overflow","ReactDOM","_jsx","className","onClick","handleBackdropClick","children","e","stopPropagation","_jsxs","totalDuration","progress","setProgress","useState","intervalId","setInterval","prevProgress","newProgress","intervalDuration","clearInterval","percentage","whiteOverlayStyle","width","height","backgroundColor","position","top","right","progressColor","questionJson","questionJsonFile","optionImages","selected","default","props","questionId","useParams","navigate","useNavigate","optionList","setOptionList","questionTitle","setQuestionTitle","questionTag","setQuestionTag","initDuration","setInitDuration","duration","setDuration","selectedOption","setSelectedOption","isModalOpen","setModalOpen","isLoading","setIsLoading","imageLoaded","setImageLoaded","optionBtnStyle","index","idx","backgroundImage","transition","opacity","forEach","image","Image","src","keying","prototype","hasOwnProperty","call","element","Number","id","options","title","controller","AbortController","timerId","getOption","questionID","state","resultParam","res","getTime","abort","setTimeout","prevDuration","clearTimeout","motion","div","initial","animate","exit","HorizontalProgressBar","item","toSelectOption","name","option","console","log","MyDialog","Loader"],"sourceRoot":""}